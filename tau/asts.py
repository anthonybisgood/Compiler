# DO NOT EDIT THIS FILE

from typing import Optional, Callable

from .tokens import Token, Span
from .symbols import (
    Symbol,
    PhonySymbol,
    SemanticType,
    PhonyType,
    Scope,
    PhonyScope,
)

i4 = " " * 4


class AST:
    span: Span  # The span of ALL tokens represented by this AST node

    def pprint(self, indent: str):
        raise NotImplementedError(
            f"AST.pprint() not implemented for {type(self)}"
        )

    def __repr__(self) -> str:
        raise NotImplementedError(
            f"AST.__repr__() not implemented for {type(self)}"
        )


class Program(AST):
    def __init__(self, decls: list["FuncDecl"], span: Span):
        self.decls: list["FuncDecl"] = decls
        self.span: Span = span

    def pprint(self, indent: str):
        print(indent + "Program")
        for decl in self.decls:
            decl.pprint(indent + i4)

    def __repr__(self):
        return f"Program({self.decls})"


class Id(AST):
    def __init__(self, token: Token):
        self.token = token
        self.symbol: Symbol = PhonySymbol()
        self.semantic_type: SemanticType = PhonyType()
        self.span: Span = token.span

    def pprint(self, indent: str):
        print(indent + f"Id({self.token}")

    def __repr__(self):
        return f"Id({self.token.__repr__()})"


class TypeAST(AST):
    semantic_type: SemanticType = PhonyType()


class Decl(AST):
    semantic_type: SemanticType = PhonyType()


class VarDecl(Decl):
    def __init__(self, id: Id, type: TypeAST, span: Span):
        self.id = id
        self.type_ast: TypeAST = type
        self.semantic_type: SemanticType = PhonyType()
        self.span: Span = span

    def pprint(self, indent: str):
        print(indent + "VarDecl")
        self.id.pprint(indent + i4)
        self.type_ast.pprint(indent + i4)

    def __repr__(self):
        return f"VarDecl({self.id}, {self.type_ast})"


class ParamDecl(Decl):
    def __init__(self, id: Id, type: TypeAST, span: Span):
        self.id = id
        self.type_ast: TypeAST = type
        self.semantic_type: SemanticType = PhonyType()
        self.span: Span = span

    def pprint(self, indent: str):
        print(indent + "ParamDecl")
        self.id.pprint(indent + i4)
        self.type_ast.pprint(indent + i4)

    def __repr__(self):
        return f"ParamDecl({self.id}, {self.type_ast})"


class IntType(TypeAST):
    def __init__(self, token: Token):
        self.token: Token = token
        self.span: Span = token.span

    def pprint(self, indent: str):
        print(indent + "IntType")

    def __repr__(self):
        return f"IntType({self.token.__repr__()})"


class BoolType(TypeAST):
    def __init__(self, token: Token):
        self.token: Token = token
        self.span: Span = token.span

    def pprint(self, indent: str):
        print(indent + "BoolType")

    def __repr__(self):
        return f"BoolType({self.token.__repr__()})"


class VoidType(TypeAST):
    def __init__(self, token: Token):
        self.token: Token = token
        self.span: Span = token.span

    def pprint(self, indent: str):
        print(indent + "VoidType")

    def __repr__(self):
        return f"VoidType({self.token.__repr__()})"


class ArrayType(TypeAST):
    def __init__(self, size: Optional["Expr"], type: TypeAST, span: Span):
        self.size: Optional["Expr"] = size
        self.element_type_ast: TypeAST = type
        self.span: Span = span

    def pprint(self, indent: str):
        print(indent + "ArrayType")
        if self.size is not None:
            self.size.pprint(indent + i4)
        self.element_type_ast.pprint(indent + i4)

    def __repr__(self):
        return f"ArrayType({self.size}, {self.element_type_ast})"


class Stmt(AST):
    pass


class PrintStmt(Stmt):
    def __init__(self, expr: "Expr", span: Span):
        self.expr: Expr = expr
        self.span: Span = span

    def pprint(self, indent: str):
        print(indent + "Print")
        self.expr.pprint(indent + i4)

    def __repr__(self):
        return f"PrintStmt({self.expr})"


class CompoundStmt(Stmt):
    def __init__(
        self,
        decls: list[VarDecl],
        stmts: list[Stmt],
        span: Span,
    ):
        self.decls: list[VarDecl] = decls
        self.stmts: list[Stmt] = stmts
        self.local_scope: Scope = PhonyScope()
        self.span: Span = span

    def pprint(self, indent: str):
        print(indent + "CompoundStmt")
        for decl in self.decls:
            decl.pprint(indent + i4)
        for stmt in self.stmts:
            stmt.pprint(indent + i4)

    def __repr__(self):
        return f"CompoundStmt({self.decls}, {self.stmts})"


class FuncDecl(AST):
    size: int

    def __init__(
        self,
        id: Id,
        params: list[ParamDecl],
        ret_type_ast: TypeAST,
        body: CompoundStmt,
        span: Span,
    ):
        self.id = id
        self.params: list[ParamDecl] = params
        self.ret_type_ast: TypeAST = ret_type_ast
        self.body: CompoundStmt = body
        self.func_scope: Scope = PhonyScope()
        self.span: Span = span

    def pprint(self, indent: str):
        print(indent + "FuncDecl")
        self.id.pprint(indent + i4)
        for param in self.params:
            param.pprint(indent + i4)
        if self.ret_type_ast is not None:
            self.ret_type_ast.pprint(indent + i4)
        self.body.pprint(indent + i4)

    def __repr__(self):
        return f"FuncDecl({self.id}, {self.params}, {self.ret_type_ast}, {self.body})"


class Expr(AST):
    semantic_type: SemanticType = PhonyType()


class CallExpr(Expr):
    def __init__(self, fn: Expr, args: list[Expr], span: Span):
        self.fn: Expr = fn
        self.args: list[Expr] = args
        self.span: Span = span

    def pprint(self, indent: str):
        print(indent + "CallExpr")
        self.fn.pprint(indent + i4)
        for arg in self.args:
            arg.pprint(indent + i4)

    def __repr__(self):
        return f"CallExpr({self.fn}, {self.args}, {self.span.__repr__()})"


class AssignStmt(Stmt):
    def __init__(self, lhs: Expr, rhs: Expr, span: Span):
        self.lhs: Expr = lhs
        self.rhs: Expr = rhs
        self.span: Span = span

    def pprint(self, indent: str):
        print(indent + "AssignStmt")
        self.lhs.pprint(indent + i4)
        self.rhs.pprint(indent + i4)

    def __repr__(self):
        return f"AssignStmt({self.lhs}, {self.rhs}, {self.span.__repr__()})"


class IfStmt(Stmt):
    def __init__(
        self,
        expr: Expr,
        thenStmt: CompoundStmt,
        elseStmt: Optional[CompoundStmt],
        span: Span,
    ):
        self.expr: Expr = expr
        self.thenStmt: CompoundStmt = thenStmt
        self.elseStmt: Optional[CompoundStmt] = elseStmt
        self.span: Span = span

    def pprint(self, indent: str):
        print(indent + "IfStmt")
        self.expr.pprint(indent + i4)
        self.thenStmt.pprint(indent + i4)
        if self.elseStmt is not None:
            self.elseStmt.pprint(indent + i4)

    def __repr__(self):
        return f"IfStmt({self.expr}, {self.thenStmt}, {self.elseStmt}, {self.span.__repr__()})"


class WhileStmt(Stmt):
    def __init__(self, expr: Expr, stmt: CompoundStmt, span: Span):
        self.expr: Expr = expr
        self.stmt: CompoundStmt = stmt
        self.span: Span = span

    def pprint(self, indent: str):
        print(indent + "WhileStmt")
        self.expr.pprint(indent + i4)
        self.stmt.pprint(indent + i4)

    def __repr__(self):
        return f"WhileStmt({self.expr}, {self.stmt}, {self.span.__repr__()})"


class CallStmt(Stmt):
    def __init__(self, call: CallExpr, span: Span):
        self.call: CallExpr = call
        self.span: Span = span

    def pprint(self, indent: str):
        print(indent + "CallStmt")
        self.call.pprint(indent + i4)

    def __repr__(self):
        return f"CallStmt({self.call})"


class ReturnStmt(Stmt):
    def __init__(self, expr: Optional[Expr], span: Span):
        self.expr: Optional[Expr] = expr
        self.span: Span = span
        self.enclosing_scope: Scope = PhonyScope()

    def pprint(self, indent: str):
        print(indent + "ReturnStmt")
        if self.expr is not None:
            self.expr.pprint(indent + i4)

    def __repr__(self):
        return f"ReturnStmt({self.expr}, {self.span.__repr__()})"


class BinaryOp(Expr):
    def __init__(self, op: Token, left: Expr, right: Expr, span: Span):
        self.op: Token = op
        self.left: Expr = left
        self.right: Expr = right
        self.span: Span = span

    def pprint(self, indent: str):
        print(indent + f"BinaryOp({self.op})")
        self.left.pprint(indent + i4)
        self.right.pprint(indent + i4)

    def __repr__(self):
        return f"BinaryOp({self.op}, {self.left}, {self.right})"


class UnaryOp(Expr):
    def __init__(self, op: Token, expr: Expr, span: Span):
        self.op: Token = op
        self.expr: Expr = expr
        self.span: Span = span

    def pprint(self, indent: str):
        print(indent + f"UnaryOp({self.op})")
        self.expr.pprint(indent + i4)

    def __repr__(self):
        return f"UnaryOp({self.op}, {self.expr})"


class ArrayCell(Expr):
    def __init__(self, arr: Expr, idx: Expr, span: Span):
        self.arr: Expr = arr
        self.idx: Expr = idx
        self.span = span

    def pprint(self, indent: str):
        print(indent + "ArrayCell")
        self.arr.pprint(indent + i4)
        self.idx.pprint(indent + i4)

    def __repr__(self):
        return f"ArrayCell({self.arr}, {self.idx}, {self.span.__repr__()})"


class IntLiteral(Expr):
    def __init__(self, token: Token, span: Span):
        self.token: Token = token
        self.span: Span = span

    def pprint(self, indent: str):
        print(indent + f"IntLiteral({self.token})")

    def __repr__(self):
        return f"IntLiteral({self.token.__repr__()})"


class BoolLiteral(Expr):
    def __init__(self, token: Token, value: bool, span: Span):
        self.token: Token = token
        self.value: bool = value
        self.span: Span = span

    def pprint(self, indent: str):
        print(f"{indent}BoolLiteral {self.value}")

    def __repr__(self):
        return f"BoolLiteral({self.token.__repr__()})"


class IdExpr(Expr):
    def __init__(self, id: Id, span: Span):
        self.id = id
        self.span = span

    def pprint(self, indent: str):
        print(indent + f"IdExpr")
        self.id.pprint(indent + i4)

    def __repr__(self):
        return f"IdExpr({self.id})"
